import pandas as pd
import statsmodels.api as sm
from statsmodels.tools.tools import add_constant

# Step 1: Load the dataset
data = pd.read_csv('dataset_full.csv')

# Step 2: Define your dependent variable (y) and independent variables (X)
y = data['target_column']  # Replace with your target column name
X = data.drop(columns=['target_column'])  # Drop the target column from your independent variables

# Step 3: Add a constant to the independent variables matrix (for the intercept)
X = add_constant(X)

# Step 4: Stepwise selection function

def stepwise_selection(X, y, threshold_in=0.05, threshold_out=0.10):
    """
    Performs stepwise regression (both forward and backward) based on AIC
    """
    initial_features = X.columns.tolist()
    best_model = sm.OLS(y, X).fit()  # Initial model
    included = initial_features.copy()

    while True:
        # Forward Step: Add the best feature
        excluded = list(set(initial_features) - set(included))
        new_pval = pd.Series(index=excluded, dtype=float)
        
        for new_column in excluded:
            model = sm.OLS(y, sm.add_constant(X[included + [new_column]])).fit()
            new_pval[new_column] = model.pvalues[new_column]

        best_pval = new_pval.min()
        if best_pval < threshold_in:
            best_feature = new_pval.idxmin()
            included.append(best_feature)

        # Backward Step: Remove the least significant feature
        model = sm.OLS(y, sm.add_constant(X[included])).fit()
        pvalues = model.pvalues.iloc[1:]  # Exclude the constant
        worst_pval = pvalues.max()
        
        if worst_pval > threshold_out:
            worst_feature = pvalues.idxmax()
            included.remove(worst_feature)

        # Break if no features are added or removed
        if best_pval >= threshold_in and worst_pval <= threshold_out:
            break

    return included

# Step 5: Perform the stepwise selection
selected_features = stepwise_selection(X, y)
print("Selected features:", selected_features)

# Step 6: Fit the final model with selected features
final_model = sm.OLS(y, sm.add_constant(X[selected_features])).fit()

# Step 7: Display the summary of the regression model
print(final_model.summary())
